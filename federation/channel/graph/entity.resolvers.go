package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"channel/graph/model"
	"context"
	"fmt"
)

// FindChannelByContentID is the resolver for the findChannelByContentID field.
func (r *entityResolver) FindChannelByContentID(ctx context.Context, contentID string) (*model.Channel, error) {
	// Regular single-entity resolution
	for _, channel := range channels {
		if channel.ContentID == contentID {
			return &channel, nil
		}
	}
	return nil, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver {
	return &entityResolver{r}
}

// BatchFindChannelsByContentIDs is a helper function to batch load channels
func BatchFindChannelsByContentIDs(contentIDs []string) ([]*model.Channel, error) {
	fmt.Println("Batch loading channels for content IDs:", contentIDs)

	// Create a map for quick lookups
	channelMap := make(map[string]*model.Channel)
	for i := range channels {
		channelMap[channels[i].ContentID] = &channels[i]
	}

	// Build result in the same order as requested
	result := make([]*model.Channel, len(contentIDs))
	for i, id := range contentIDs {
		result[i] = channelMap[id]
	}

	return result, nil
}

type entityResolver struct{ *Resolver }
